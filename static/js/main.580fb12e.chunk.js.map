{"version":3,"sources":["components/data-grid/data-grid.js","components/stock-figure/stock-figure.js","layout.js","serviceWorker.js","index.js"],"names":["rawData","require","Array","prototype","swapElements","a","b","this","splice","DataGrid","props","state","width","window","innerWidth","height","innerHeight","updateWindowDimensions","bind","columnDefs","Object","keys","massageRawData","map","x","genericColDef","key","field","specificColDef","minWidth","push","assign","tempData","_","addEventListener","removeEventListener","setState","e","data","Ticker","onSelectTicker","dataGridDef","defaultColDef","resizable","sortable","filter","getColumnDefs","rowData","Grid","container","spacing","justify","alignItems","item","xs","className","join","paginationAutoPageSize","pagination","onRowClicked","React","Component","arkData","StockFigure","value","categoryData","values","volumes","i","length","dayCount","result","len","sum","j","Math","round","splitData","option","backgroundColor","title","text","left","top","textStyle","color","tooltip","trigger","axisPointer","animation","type","lineStyle","opacity","legend","inactiveColor","link","xAxisIndex","label","toolbox","show","feature","dataZoom","yAxisIndex","brush","visualMap","seriesIndex","dimension","pieces","grid","right","bottom","xAxis","scale","boundaryGap","axisLine","onZero","splitLine","splitNumber","min","max","gridIndex","axisTick","axisLabel","yAxis","splitArea","start","end","handleIcon","handleSize","dataBackground","areaStyle","handleStyle","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","series","name","itemStyle","color0","borderColor","borderColor0","markPoint","normal","formatter","param","valueDim","symbolOffset","coord","markLine","symbol","symbolSize","emphasis","calculateMA","smooth","filteredArkData","groupMap","date","dataArrayInDate","dataInProps","find","m","Date","buyCount","Direction","sellCount","pointText","getOption","notMerge","lazyUpdate","style","rest","restClient","Layout","inputTicker","massagedData","figureTitle","isInputing","handleChange","handleBlur","handleSubmit","handlingComposition","handleComposition","onDataGridSelectTicker","isCompositionEnd","event","target","trim","toUpperCase","toDate","fromDate","setDate","getDate","toDateString","getTime","getTimezoneOffset","toISOString","split","fromDateString","that","stocks","aggregates","then","response","results","massaged","row","timeInDate","t","o","c","l","h","v","catch","preventDefault","subComponent","md","packageJson","version","onSubmit","FormControl","Input","id","onCompositionStart","onCompositionUpdate","onCompositionEnd","onChange","onBlur","placeholder","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","edge","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gpyDASIA,G,4BAAUC,EAAQ,MAGtBC,MAAMC,UAAUC,aAAe,SAAUC,EAAGC,GAExC,OADAC,KAAKF,GAAKE,KAAKC,OAAOF,EAAG,EAAGC,KAAKF,IAAI,GAC9BE,M,IAwHIE,E,kDApHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAEnB,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBANf,E,0DASLlB,GAAU,IAAD,OACbmB,EAAa,GA8CnB,OA7C2BC,OAAOC,KAAKd,KAAKe,eAAetB,GAAS,IAAII,aAAa,EAAG,GAErEmB,KAAI,SAAAC,GACnB,IAAIC,EAAgB,CAChBC,IAAKF,EACLG,MAAOH,GAEPI,EAAiB,GACrB,OAAQJ,GACJ,IAAK,OACDI,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAC1BiB,SAAU,KAEd,MACJ,IAAK,YACL,IAAK,QACL,IAAK,SACL,IAAK,WACDD,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAC1BiB,SAAU,KAEd,MACJ,IAAK,OACL,IAAK,SACDD,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAC1BiB,SAAU,IAEd,MACJ,IAAK,OACDD,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAE9B,MACJ,QACIgB,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,EAC1BiB,SAAU,KAItBV,EAAWW,KAAKV,OAAOW,OAAON,EAAeG,OAE1CT,I,qCAGInB,GACX,IAAIgC,EAAWC,YAAYjC,GAU3B,OAPAgC,EAAST,KAAI,SAAAC,GACT,IAAK,IAAIE,KAAOF,EACA,KAARE,UACOF,EAAEE,MAIdM,I,0CAIPzB,KAAKU,yBACLJ,OAAOqB,iBAAiB,SAAU3B,KAAKU,0B,6CAIvCJ,OAAOsB,oBAAoB,SAAU5B,KAAKU,0B,+CAI1CV,KAAK6B,SAAS,CAAExB,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,gB,mCAGhDqB,GACLA,GAAKA,EAAEC,MAAQD,EAAEC,KAAKC,QACtBhC,KAAKG,MAAM8B,eAAeH,K,+BAK9B,IAAMI,EAAc,CAChBC,cAAe,CAAEC,WAAW,EAAMC,UAAU,EAAMC,QAAQ,GAC1D1B,WAAYZ,KAAKuC,cAAc9C,GAC/B+C,QAASxC,KAAKe,eAAetB,IAEjC,OACI,kBAACgD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACpD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,UAAW,CAAC,uBAAwB,UAAUC,KAAK,MAClE,kBAAC,cAAD,CACIT,QAASN,EAAYM,QACrB5B,WAAYsB,EAAYtB,WACxBuB,cAAeD,EAAYC,cAC3Be,wBAAwB,EACxBC,YAAY,EACZC,aAAcpD,KAAKoD,aAAazC,KAAKX,c,GA5GtCqD,IAAMC,W,2BCZzBC,EAAU7D,EAAQ,KAmbP8D,E,kDA3aX,WAAYrD,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEqD,MAAO,IACtB,EAAKtD,MAAQA,EAHE,E,sDAMTV,GAKN,IAJA,IAAIiE,EAAe,GACfC,EAAS,GACTC,EAAU,GAELC,EAAI,EAAGA,EAAIpE,EAAQqE,OAAQD,IAChCH,EAAanC,KAAK9B,EAAQoE,GAAG5D,OAAO,EAAG,GAAG,IAC1C0D,EAAOpC,KAAK9B,EAAQoE,IACpBD,EAAQrC,KAAK,CAACsC,EAAGpE,EAAQoE,GAAG,GAAIpE,EAAQoE,GAAG,GAAKpE,EAAQoE,GAAG,GAAK,GAAK,IAEzE,MAAO,CACHH,aAAcA,EACdC,OAAQA,EACRC,QAASA,K,kCAILG,GAER,IADA,IAAIC,EAAS,GACJH,EAAI,EAAGI,EAAMjE,KAAK+B,KAAK4B,OAAOG,OAAQD,EAAII,EAAKJ,IACpD,GAAIA,EAAIE,EACJC,EAAOzC,KAAK,SADhB,CAKA,IADA,IAAI2C,EAAM,EACDC,EAAI,EAAGA,EAAIJ,EAAUI,IAC1BD,GAAOlE,KAAK+B,KAAK4B,OAAOE,EAAIM,GAAG,GAEnCH,EAAOzC,KAAK6C,KAAKC,MAAMH,EAAMH,EAAW,KAAO,KAEnD,OAAOC,I,kCAIE,IAAD,OACRhE,KAAK+B,KAAO/B,KAAKsE,UAAU5C,YAAY1B,KAAKG,MAAM4B,OAClD,IAAIwC,EAAS,CACTC,gBAAiB,qBACjBC,MAAO,CACHC,KAAM1E,KAAKG,MAAMsE,MACjBE,KAAM,KACNC,IAAK,MACLC,UAAW,CAAEC,MAAO,SAExBC,QAAS,CACLC,QAAS,OACTC,YAAa,CACTC,WAAW,EACXC,KAAM,QACNC,UAAW,CACPN,MAAO,UACPzE,MAAO,EACPgF,QAAS,KAIrBC,OAAQ,CACJvD,KAAM,CAAC,MAAO,MAAO,OAAQ,QAC7BwD,cAAe,OACfV,UAAW,CACPC,MAAO,QAEXF,IAAK,MAETK,YAAa,CACTO,KAAM,CAAEC,WAAY,OACpBC,MAAO,CACHlB,gBAAiB,SAGzBmB,QAAS,CACLC,MAAM,EACNC,QAAS,CACLC,SAAU,CACNC,YAAY,GAEhBC,MAAO,CACHb,KAAM,CAAC,QAAS,YAI5Bc,UAAW,CACPL,MAAM,EACNM,YAAa,EACbC,UAAW,EACXC,OAAQ,CAAC,CACL3C,MAAO,EACPqB,MAnGJ,WAoGG,CACCrB,OAAQ,EACRqB,MApGN,aAuGFuB,KAAM,CACF,CACI1B,KAAM,KACN2B,MAAO,KACPC,OAAQ,OAEZ,CACI5B,KAAM,KACN2B,MAAO,KACP9F,OAAQ,MACR+F,OAAQ,QAGhBC,MAAO,CACH,CACIrB,KAAM,WACNpD,KAAM/B,KAAK+B,KAAK2B,aAChB+C,OAAO,EACPC,aAAa,EACbC,SAAU,CAAEC,QAAQ,EAAOxB,UAAW,CAAEN,MAAO,SAC/C+B,UAAW,CAAEjB,MAAM,GACnBkB,YAAa,GACbC,IAAK,UACLC,IAAK,WAET,CACI7B,KAAM,WACN8B,UAAW,EACXlF,KAAM/B,KAAK+B,KAAK2B,aAChB+C,OAAO,EACPC,aAAa,EACbC,SAAU,CAAEC,QAAQ,EAAOxB,UAAW,CAAEN,MAAO,YAC/CoC,SAAU,CAAEtB,MAAM,GAClBiB,UAAW,CAAEjB,MAAM,GACnBuB,UAAW,CAAEvB,MAAM,GACnBkB,YAAa,GACbC,IAAK,UACLC,IAAK,YAGbI,MAAO,CAAC,CACJX,OAAO,EACPY,UAAW,CACPzB,MAAM,GAEVe,SAAU,CAAEvB,UAAW,CAAEN,MAAO,SAChC+B,UAAW,CAAEjB,MAAM,IAEvB,CACIa,OAAO,EACPQ,UAAW,EACXH,YAAa,EACbK,UAAW,CAAEvB,MAAM,GACnBe,SAAU,CAAEf,MAAM,EAAOR,UAAW,CAAEN,MAAO,SAC7CoC,SAAU,CAAEtB,MAAM,GAClBiB,UAAW,CAAEjB,MAAM,KAGvBE,SAAU,CACN,CACIX,KAAM,SACNmC,MAAO,EACPC,IAAK,KAET,CACI3B,MAAM,EACNT,KAAM,SACNoB,OAAQ,KACRe,MAAO,EACPC,IAAK,IACL1C,UAAW,CACPC,MAAO,WAEX0C,WAAY,qMACZC,WAAY,MACZC,eAAgB,CACZC,UAAW,CACP7C,MAAO,WAEXM,UAAW,CACPC,QAAS,GACTP,MAAO,YAGf8C,YAAa,CACT9C,MAAO,OACP+C,WAAY,EACZC,YAAa,qBACbC,cAAe,EACfC,cAAe,KAI3BC,OAAQ,CACJ,CACIC,KAAM,MACN/C,KAAM,cACNpD,KAAM/B,KAAK+B,KAAK4B,OAChBwE,UAAW,CACPrD,MA1MV,UA2MUsD,OA7MR,UA8MQC,YA3MJ,UA4MIC,aA9MF,WAgNFC,UACA,CACI7C,MAAO,CACH8C,OAAQ,CACJC,UAAW,SAAUC,GACjB,GAAuB,kBAAXA,EACR,OAAgB,MAATA,EAAgBtE,KAAKC,MAAMqE,EAAMjF,OAAS,MAKjE1B,KAAM,CACF,CACImG,KAAM,gBACN/C,KAAM,MACNwD,SAAU,UACVC,aAAc,CAAC,GAAI,KAEvB,CACIV,KAAM,eACN/C,KAAM,MACNwD,SAAU,SACVC,aAAc,CAAC,GAAI,KAEvB,CACIV,KAAM,yBACN/C,KAAM,UACNwD,SAAU,QACVC,aAAc,CAAC,GAAI,MAG3B7D,QAAS,CACL0D,UAAY,SAACC,GAAD,OAAWA,EAAMR,KAAO,QAAUQ,EAAM3G,KAAK8G,OAAS,OAG1EC,SAAU,CACNC,OAAQ,CAAC,OAAQ,QACjB3D,UAAW,CACPN,MAvPZ,WAyPQ/C,KAAM,CACF,CACI,CACImG,KAAM,yBACN/C,KAAM,MACNwD,SAAU,SACVI,OAAQ,SACRC,WAAY,GACZtD,MAAO,CACHE,MAAM,GAEVqD,SAAU,CACNvD,MAAO,CACHE,MAAM,KAIlB,CACIT,KAAM,MACNwD,SAAU,UACVI,OAAQ,SACRC,WAAY,GACZtD,MAAO,CACHE,MAAM,GAEVqD,SAAU,CACNvD,MAAO,CACHE,MAAM,MAKtB,CACIsC,KAAM,oBACN/C,KAAM,MACNwD,SAAU,SAEd,CACIT,KAAM,oBACN/C,KAAM,MACNwD,SAAU,YAK1B,CACIT,KAAM,MACN/C,KAAM,OACNpD,KAAM/B,KAAKkJ,YAAY,GACvBC,QAAQ,EACR/D,UAAW,CACPC,QAAS,IAEb8C,UAAW,CACPrD,MAAO,YAGf,CACIoD,KAAM,OACN/C,KAAM,OACNpD,KAAM/B,KAAKkJ,YAAY,IACvBC,QAAQ,EACR/D,UAAW,CACPC,QAAS,IAEb8C,UAAW,CACPrD,MAAO,YAGf,CACIoD,KAAM,OACN/C,KAAM,OACNpD,KAAM/B,KAAKkJ,YAAY,IACvBC,QAAQ,EACR/D,UAAW,CACPC,QAAS,IAEb8C,UAAW,CACPrD,MAAO,YAYf,CACIoD,KAAM,SACN/C,KAAM,MACNM,WAAY,EACZM,WAAY,EACZhE,KAAM/B,KAAK+B,KAAK6B,WAOtBwF,EAAkB7F,EAAQjB,QAAO,SAAArB,GAAC,OAAIA,EAAEe,SAAW,EAAK7B,MAAMsE,SACpE,IAAK2E,GAA8C,IAA3BA,EAAgBtF,OACpC,OAAOS,EAGX,IAAM8E,EAAW3H,UAAU0H,EAAiB,QAtTpC,WAuTCE,GACL,IAAMC,EAAkBF,EAASC,GAC3BE,EAAc,EAAKrJ,MAAM4B,KAAK0H,MAAK,SAAAC,GAAC,OAAIA,EAAE,KAAOH,EAAgB,GAAGI,QAC1E,IAAMH,IAAeA,EAAY,GAC7B,iBAGJ,IAAMI,EAAWL,EAAgBjH,QAAO,SAAArB,GAAC,MAAoB,QAAhBA,EAAE4I,aAAqB/F,OAC9DgG,EAAYP,EAAgBzF,OAAS8F,EAE3C,GAAiB,IAAbA,GAAgC,IAAdE,EAAiB,CACnC,IAAIC,EAAY,GACC,IAAbH,EACAG,EAA0B,IAAdD,EAAA,UACKP,EAAgB,GAAGM,WADxB,iBAEYC,GACH,IAAdA,IACPC,EAAyB,IAAbH,EAAA,UACKL,EAAgB,GAAGM,WADxB,gBAEWD,IAG3BrF,EAAO0D,OAAO,GAAGM,UAAUxG,KAAKR,KAAK,CACjC2G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,YAAgCJ,EAAgB,GAAGM,WACvDhB,MAAO,CAACU,EAAgB,GAAGI,KAAMH,EAAY,IAC7C/F,MAAOsG,EACP5B,UAAW,CACPrD,MAAoB,IAAb8E,EACD,gBACA,4BAKdrF,EAAO0D,OAAO,GAAGM,UAAUxG,KAAKR,KAAK,CACjC2G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,QACJd,MAAO,CAACU,EAAgB,GAAGI,KAAMH,EAAY,IAC7C/F,MAAM,SAAD,OAAWmG,GAChBzB,UAAW,CACPrD,MAAO,uBAIfP,EAAO0D,OAAO,GAAGM,UAAUxG,KAAKR,KAAK,CACjC2G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,SACJd,MAAO,CAACU,EAAgB,GAAGI,KAAuB,IAAjBH,EAAY,IAC7C/F,MAAM,SAAD,OAAWqG,GAChB3B,UAAW,CACPrD,MAAO,oBAhDvB,IAAK,IAAIwE,KAAQD,EAAU,EAAlBC,GAqDT,OAAO/E,I,+BAIP,OACI,kBAAC,IAAD,CACIA,OAAQvE,KAAKgK,YACbC,UAAU,EACVC,YAAY,EACZC,MAAO,CAAE3J,OAAQ,QAASH,MAAO,c,GA9ZvBgD,IAAMC,WCE5BC,EAAU7D,EAAQ,KAEhB0K,EAAOC,qBAAW,oCA+ITC,E,kDA5IX,WAAYnK,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEmK,YAAa,GAAIC,aAAc,GAAIC,YAAa,GAAIC,YAAY,GAC/E,EAAKC,aAAe,EAAKA,aAAahK,KAAlB,gBACpB,EAAKiK,WAAa,EAAKA,WAAWjK,KAAhB,gBAClB,EAAKkK,aAAe,EAAKA,aAAalK,KAAlB,gBACpB,EAAKmK,oBAAsB,EAAKA,oBAAoBnK,KAAzB,gBAC3B,EAAKoK,kBAAoB,EAAKA,kBAAkBpK,KAAvB,gBACzB,EAAKqK,uBAAyB,EAAKA,uBAAuBrK,KAA5B,gBAC9B,EAAKsK,kBAAmB,EATT,E,kEAafjL,KAAKiL,kBAAmB,I,wCAGVnJ,GACd9B,KAAKiL,kBAAmB,I,mCAGfC,GACLlL,KAAKiL,kBACLjL,KAAK6B,SAAS,CAAE0I,YAAaW,EAAMC,OAAO1H,MAAM2H,OAAOC,kB,iCAIpDH,GACPlL,KAAKiL,kBAAmB,I,mCAGfC,GAET,IAAMI,EAAS,IAAI3B,KACf4B,EAAW,IAAI5B,KACnB4B,EAASC,QAAQD,EAASE,UAAY,IACtC,IAAMC,EAAe,IAAI/B,KAAK2B,EAAOK,UAA0C,IAA7BL,EAAOM,qBACpDC,cACAC,MAAM,KAAK,GACVC,EAAiB,IAAIpC,KAAK4B,EAASI,UAA4C,IAA/BJ,EAASK,qBAC1DC,cACAC,MAAM,KAAK,GAEZE,EAAOhM,KAEXoK,EAAK6B,OACAC,WAAWlM,KAAKI,MAAMmK,YAAa,EAAG,MAAOwB,EAAgBL,GAC7DS,MAAK,SAACC,GAEH,GAAIA,GAAYA,EAASC,QAAS,CAC9B,IAAMC,EAAW,GAEjBF,EAASC,QAAQrL,KAAI,SAAAuL,GACjB,IAAI/J,EAAU,GACRgK,EAAa,IAAI7C,KAAK4C,EAAIE,GAChCjK,EAAQjB,KACJ,IAAIoI,KAAK6C,EAAWb,UAA8C,IAAjCa,EAAWZ,qBACvCC,cACAC,MAAM,KAAK,GAChBS,EAAIG,EACJH,EAAII,EACJJ,EAAIK,EACJL,EAAIM,EACJN,EAAIO,GAERR,EAAS/K,KAAKiB,MAElBwJ,EAAKnK,SAAS,CAAE2I,aAAc8B,IAC9BN,EAAKnK,SAAS,CAAE4I,YAAa/I,YAAYsK,EAAK5L,MAAMmK,mBAG3DwC,QACL7B,EAAM8B,mB,6CAGalL,GACnB9B,KAAK6B,SAAS,CAAE0I,YAAazI,EAAEC,KAAKC,SACpChC,KAAK6K,aAAa/I,EAAEoJ,S,+BAIpB,IAAI+B,EAOJ,OALIA,EADAjN,KAAKI,MAAMoK,aAAa1G,OAAS,EAClB,kBAAC,EAAD,CAAaW,MAAOzE,KAAKI,MAAMqK,YAAYY,cAAetJ,KAAM/B,KAAKI,MAAMoK,eAE3E,8BAIf,yBAAKxH,UAAU,kBACX,yBAAKA,UAAU,kBACX,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACpD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGmK,GAAI,EAAGlK,UAAU,mBAC/B,wBAAIA,UAAU,SAAd,sBAEJ,kBAACP,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGmK,GAAI,EAAGlK,UAAU,sBAC/B,uBAAGA,UAAU,oBAAb,YAA0CmK,EAAYC,SACtD,uBAAGpK,UAAU,wBAAb,qBAAuDO,EAAQ,GAAR,OAE3D,kBAACd,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGmK,GAAI,EAAGlK,UAAU,wBAC/B,0BAAMqK,SAAUrN,KAAK6K,cACjB,kBAACyC,EAAA,EAAD,KACI,6BACI,kBAACC,EAAA,EAAD,CACIC,GAAG,mBACH/J,MAAOzD,KAAKI,MAAMmK,YAClBkD,mBAAoBzN,KAAK8K,oBACzB4C,oBAAqB1N,KAAK8K,oBAC1B6C,iBAAkB3N,KAAK+K,kBACvB6C,SAAU5N,KAAK2K,aACfkD,OAAQ7N,KAAK4K,WACbkD,YAAY,SACZC,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACrB,kBAACC,EAAA,EAAD,CACIC,aAAW,SACXC,QAASpO,KAAK6K,aACdwD,KAAK,OAEL,kBAAC,IAAD,CAAYvJ,MAAM,sBAW1D,yBAAK9B,UAAU,qBACX,kBAAC,EAAD,CAAUf,eAAgBjC,KAAKgL,0BAEnC,yBAAKhI,UAAU,wBACViK,Q,GAtIA5J,IAAMC,WCNPgL,QACW,cAA7BhO,OAAOiO,SAASC,UAEe,UAA7BlO,OAAOiO,SAASC,UAEhBlO,OAAOiO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.580fb12e.chunk.js","sourcesContent":["import React from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\nimport * as _ from 'lodash';\nimport { Grid } from '@material-ui/core';\nimport './data-grid.scss';\n\nlet rawData = require('../../rawData/mergedData.json');\n\n// eslint-disable-next-line\nArray.prototype.swapElements = function (a, b) {\n    this[a] = this.splice(b, 1, this[a])[0];\n    return this;\n}\n\nclass DataGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    getColumnDefs(rawData) {\n        const columnDefs = [];\n        const columnNamesInOrder = Object.keys(this.massageRawData(rawData)[0]).swapElements(0, 1);\n        // eslint-disable-next-line\n        columnNamesInOrder.map(x => {\n            let genericColDef = {\n                key: x,\n                field: x,\n            };\n            let specificColDef = {};\n            switch (x) {\n                case 'Date':\n                    specificColDef = {\n                        width: this.state.width / 12,\n                        minWidth: 120,\n                    }\n                    break\n                case 'Direction':\n                case 'CUSIP':\n                case 'Shares':\n                case '% Of ETF':\n                    specificColDef = {\n                        width: this.state.width / 12,\n                        minWidth: 100,\n                    }\n                    break\n                case 'FUND':\n                case 'Ticker':\n                    specificColDef = {\n                        width: this.state.width / 10,\n                        minWidth: 90,\n                    }\n                    break\n                case 'Name':\n                    specificColDef = {\n                        width: this.state.width / 4,\n                    }\n                    break\n                default:\n                    specificColDef = {\n                        width: this.state.width / 8,\n                        minWidth: 100,\n                    };\n                    break;\n            }\n            columnDefs.push(Object.assign(genericColDef, specificColDef));\n        })\n        return columnDefs;\n    }\n\n    massageRawData(rawData) {\n        let tempData = _.cloneDeep(rawData);\n        // remove empty property\n        // eslint-disable-next-line\n        tempData.map(x => {\n            for (let key in x) {\n                if (key === '') {\n                    delete x[key];\n                }\n            }\n        })\n        return tempData;\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    onRowClicked(e) {\n        if (e && e.data && e.data.Ticker) {\n            this.props.onSelectTicker(e);\n        }\n    }\n\n    render() {\n        const dataGridDef = {\n            defaultColDef: { resizable: true, sortable: true, filter: true },\n            columnDefs: this.getColumnDefs(rawData),\n            rowData: this.massageRawData(rawData)\n        }\n        return (\n            <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                <Grid item xs={11} className={['ag-theme-alpine-dark', 'center'].join(' ')}>\n                    <AgGridReact\n                        rowData={dataGridDef.rowData}\n                        columnDefs={dataGridDef.columnDefs}\n                        defaultColDef={dataGridDef.defaultColDef}\n                        paginationAutoPageSize={true}\n                        pagination={true}\n                        onRowClicked={this.onRowClicked.bind(this)}\n                    >\n                    </AgGridReact>\n                </Grid>\n            </Grid>\n        );\n    }\n};\n\nexport default DataGrid;","import React from 'react';\nimport * as _ from 'lodash';\nimport './stock-figure.scss';\nimport ReactEcharts from 'echarts-for-react';\n\nlet arkData = require('../../rawData/mergedData.json');\n\nvar downColor = '#ec0000';\nvar downBorderColor = '#8A0000';\nvar upColor = '#00da3c';\nvar upBorderColor = '#008F28';\n\nclass StockFigure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n        this.props = props;\n    }\n\n    splitData(rawData) {\n        var categoryData = [];\n        var values = [];\n        var volumes = [];\n\n        for (var i = 0; i < rawData.length; i++) {\n            categoryData.push(rawData[i].splice(0, 1)[0]);\n            values.push(rawData[i]);\n            volumes.push([i, rawData[i][4], rawData[i][0] > rawData[i][1] ? 1 : -1]);;\n        }\n        return {\n            categoryData: categoryData,\n            values: values,\n            volumes: volumes\n        };\n    }\n\n    calculateMA(dayCount) {\n        var result = [];\n        for (var i = 0, len = this.data.values.length; i < len; i++) {\n            if (i < dayCount) {\n                result.push('-');\n                continue;\n            }\n            var sum = 0;\n            for (var j = 0; j < dayCount; j++) {\n                sum += this.data.values[i - j][1];\n            }\n            result.push(Math.round(sum / dayCount * 100) / 100);\n        }\n        return result;\n    }\n\n\n    getOption() {\n        this.data = this.splitData(_.cloneDeep(this.props.data));\n        let option = {\n            backgroundColor: 'rgb(206, 255, 233)',\n            title: {\n                text: this.props.title,\n                left: '5%',\n                top: '-1%',\n                textStyle: { color: '#000' },\n            },\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    animation: false,\n                    type: 'cross',\n                    lineStyle: {\n                        color: '#376df4',\n                        width: 2,\n                        opacity: 1\n                    }\n                }\n            },\n            legend: {\n                data: ['Day', 'MA5', 'MA10', 'MA20'],\n                inactiveColor: '#777',\n                textStyle: {\n                    color: '#000'\n                },\n                top: '1%',\n            },\n            axisPointer: {\n                link: { xAxisIndex: 'all' },\n                label: {\n                    backgroundColor: '#777'\n                }\n            },\n            toolbox: {\n                show: false,\n                feature: {\n                    dataZoom: {\n                        yAxisIndex: false\n                    },\n                    brush: {\n                        type: ['lineX', 'clear']\n                    }\n                }\n            },\n            visualMap: {\n                show: false,\n                seriesIndex: 4,\n                dimension: 2,\n                pieces: [{\n                    value: 1,\n                    color: downColor\n                }, {\n                    value: -1,\n                    color: upColor\n                }]\n            },\n            grid: [\n                {\n                    left: '5%',\n                    right: '5%',\n                    bottom: '30%'\n                },\n                {\n                    left: '5%',\n                    right: '5%',\n                    height: '15%',\n                    bottom: '10%'\n                }\n            ],\n            xAxis: [\n                {\n                    type: 'category',\n                    data: this.data.categoryData,\n                    scale: true,\n                    boundaryGap: false,\n                    axisLine: { onZero: false, lineStyle: { color: '#000' } },\n                    splitLine: { show: false },\n                    splitNumber: 20,\n                    min: 'dataMin',\n                    max: 'dataMax'\n                },\n                {\n                    type: 'category',\n                    gridIndex: 1,\n                    data: this.data.categoryData,\n                    scale: true,\n                    boundaryGap: false,\n                    axisLine: { onZero: false, lineStyle: { color: '#8392A5' } },\n                    axisTick: { show: false },\n                    splitLine: { show: false },\n                    axisLabel: { show: false },\n                    splitNumber: 20,\n                    min: 'dataMin',\n                    max: 'dataMax'\n                }\n            ],\n            yAxis: [{\n                scale: true,\n                splitArea: {\n                    show: true\n                },\n                axisLine: { lineStyle: { color: '#000' } },\n                splitLine: { show: false }\n            },\n            {\n                scale: true,\n                gridIndex: 1,\n                splitNumber: 2,\n                axisLabel: { show: false },\n                axisLine: { show: false, lineStyle: { color: '#000' } },\n                axisTick: { show: false },\n                splitLine: { show: false }\n            }\n            ],\n            dataZoom: [\n                {\n                    type: 'inside',\n                    start: 0,\n                    end: 100\n                },\n                {\n                    show: true,\n                    type: 'slider',\n                    bottom: '2%',\n                    start: 0,\n                    end: 100,\n                    textStyle: {\n                        color: '#8392A5'\n                    },\n                    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n                    handleSize: '80%',\n                    dataBackground: {\n                        areaStyle: {\n                            color: '#8392A5'\n                        },\n                        lineStyle: {\n                            opacity: 0.8,\n                            color: '#8392A5'\n                        }\n                    },\n                    handleStyle: {\n                        color: '#fff',\n                        shadowBlur: 3,\n                        shadowColor: 'rgba(0, 0, 0, 0.6)',\n                        shadowOffsetX: 2,\n                        shadowOffsetY: 2\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'Day',\n                    type: 'candlestick',\n                    data: this.data.values,\n                    itemStyle: {\n                        color: upColor,\n                        color0: downColor,\n                        borderColor: upBorderColor,\n                        borderColor0: downBorderColor\n                    },\n                    markPoint:\n                    {\n                        label: {\n                            normal: {\n                                formatter: function (param) {\n                                    if (typeof (param) === 'number') {\n                                        return param != null ? Math.round(param.value) : '';\n                                    }\n                                }\n                            }\n                        },\n                        data: [\n                            {\n                                name: 'highest value',\n                                type: 'max',\n                                valueDim: 'highest',\n                                symbolOffset: [0, -20]\n                            },\n                            {\n                                name: 'lowest value',\n                                type: 'min',\n                                valueDim: 'lowest',\n                                symbolOffset: [0, -20]\n                            },\n                            {\n                                name: 'average value on close',\n                                type: 'average',\n                                valueDim: 'close',\n                                symbolOffset: [0, -20]\n                            }\n                        ],\n                        tooltip: {\n                            formatter: ((param) => param.name + '<br>' + (param.data.coord || ''))\n                        }\n                    },\n                    markLine: {\n                        symbol: ['none', 'none'],\n                        lineStyle: {\n                            color: downColor\n                        },\n                        data: [\n                            [\n                                {\n                                    name: 'from lowest to highest',\n                                    type: 'min',\n                                    valueDim: 'lowest',\n                                    symbol: 'circle',\n                                    symbolSize: 10,\n                                    label: {\n                                        show: false\n                                    },\n                                    emphasis: {\n                                        label: {\n                                            show: false\n                                        }\n                                    }\n                                },\n                                {\n                                    type: 'max',\n                                    valueDim: 'highest',\n                                    symbol: 'circle',\n                                    symbolSize: 10,\n                                    label: {\n                                        show: false\n                                    },\n                                    emphasis: {\n                                        label: {\n                                            show: false\n                                        }\n                                    }\n                                }\n                            ],\n                            {\n                                name: 'min line on close',\n                                type: 'min',\n                                valueDim: 'close'\n                            },\n                            {\n                                name: 'max line on close',\n                                type: 'max',\n                                valueDim: 'close'\n                            }\n                        ]\n                    }\n                },\n                {\n                    name: 'MA5',\n                    type: 'line',\n                    data: this.calculateMA(5),\n                    smooth: true,\n                    lineStyle: {\n                        opacity: 0.5\n                    },\n                    itemStyle: {\n                        color: '#0000FF'\n                    }\n                },\n                {\n                    name: 'MA10',\n                    type: 'line',\n                    data: this.calculateMA(10),\n                    smooth: true,\n                    lineStyle: {\n                        opacity: 0.5\n                    },\n                    itemStyle: {\n                        color: '#FFAE19',\n                    }\n                },\n                {\n                    name: 'MA20',\n                    type: 'line',\n                    data: this.calculateMA(20),\n                    smooth: true,\n                    lineStyle: {\n                        opacity: 0.5\n                    },\n                    itemStyle: {\n                        color: '#FF00FF',\n                    }\n                },\n                // {\n                //     name: 'MA30',\n                //     type: 'line',\n                //     data: this.calculateMA(30),\n                //     smooth: true,\n                //     lineStyle: {\n                //         opacity: 0.5\n                //     }\n                // },\n                {\n                    name: 'Volume',\n                    type: 'bar',\n                    xAxisIndex: 1,\n                    yAxisIndex: 1,\n                    data: this.data.volumes\n                }\n\n            ]\n        };\n\n        // handle mark point for BUY/SELL from ARK\n        const filteredArkData = arkData.filter(x => x.Ticker === this.props.title);\n        if (!filteredArkData || filteredArkData.length === 0) {\n            return option;\n        }\n\n        const groupMap = _.groupBy(filteredArkData, 'Date');\n        for (let date in groupMap) {\n            const dataArrayInDate = groupMap[date];\n            const dataInProps = this.props.data.find(m => m[0] === dataArrayInDate[0].Date);\n            if (!(dataInProps && dataInProps[4])) {\n                continue;\n            }\n\n            const buyCount = dataArrayInDate.filter(x => x.Direction === 'Buy').length;\n            const sellCount = dataArrayInDate.length - buyCount;\n\n            if (buyCount === 0 || sellCount === 0) {\n                let pointText = '';\n                if (buyCount === 0) {\n                    pointText = sellCount === 1\n                                ? `${dataArrayInDate[0].Direction}`\n                                : `Sell\\nX${sellCount}`;\n                } else if (sellCount === 0) {\n                    pointText = buyCount === 1\n                                ? `${dataArrayInDate[0].Direction}`\n                                : `Buy\\nX${buyCount}`;\n                }\n\n                option.series[0].markPoint.data.push({\n                    name: `${dataArrayInDate[0].Date} ${dataArrayInDate[0].Direction}`,\n                    coord: [dataArrayInDate[0].Date, dataInProps[4]],\n                    value: pointText,\n                    itemStyle: {\n                        color: buyCount === 0\n                            ? 'rgb(41,60,85)'\n                            : 'rgb(186, 171, 52)'\n                    }\n                })\n            } else {\n                // have buyCount > 0 and sellCount > 0\n                option.series[0].markPoint.data.push({\n                    name: `${dataArrayInDate[0].Date} Buy`,\n                    coord: [dataArrayInDate[0].Date, dataInProps[4]],\n                    value: `Buy\\nX${buyCount}`,\n                    itemStyle: {\n                        color: 'rgb(186, 171, 52)'\n                    }\n                })\n\n                option.series[0].markPoint.data.push({\n                    name: `${dataArrayInDate[0].Date} Sell`,\n                    coord: [dataArrayInDate[0].Date, dataInProps[4] * 1.1],\n                    value: `Sell\\n${sellCount}`,\n                    itemStyle: {\n                        color: 'rgb(41,60,85)'\n                    }\n                })\n            }\n        }\n        return option;\n    }\n\n    render() {\n        return (\n            <ReactEcharts\n                option={this.getOption()}\n                notMerge={true}\n                lazyUpdate={true}\n                style={{ height: '500px', width: '100%' }}\n            />\n            // /* <ReactEcharts\n            //     option={this.getOption()}\n            //     notMerge={true}\n            //     lazyUpdate={true}\n            //     theme={\"theme_name\"}\n            //     onChartReady={this.onChartReadyCallback}\n            //     onEvents={EventsDict}\n            //     opts={} /> */\n        );\n    }\n}\n\nexport default StockFigure;","import React from 'react';\nimport * as _ from 'lodash';\nimport { restClient } from \"polygon.io\";\nimport {\n    Grid, Input, FormControl,\n    IconButton, InputAdornment,\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport packageJson from '../package.json';\nimport './layout.scss';\nimport DataGrid from './components/data-grid/data-grid';\nimport StockFigure from './components/stock-figure/stock-figure';\n\nlet arkData = require('./rawData/mergedData.json');\n\nconst rest = restClient(\"RTHdj0YLW1JrkVcVeSQjBSHFgS4lgtCf\");\n\nclass Layout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { inputTicker: '', massagedData: [], figureTitle: '', isInputing: false };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handlingComposition = this.handlingComposition.bind(this);\n        this.handleComposition = this.handleComposition.bind(this);\n        this.onDataGridSelectTicker = this.onDataGridSelectTicker.bind(this);\n        this.isCompositionEnd = true;\n    }\n\n    handlingComposition() {\n        this.isCompositionEnd = false;\n    }\n\n    handleComposition(e) {\n        this.isCompositionEnd = true;\n    }\n\n    handleChange(event) {\n        if (this.isCompositionEnd) {\n            this.setState({ inputTicker: event.target.value.trim().toUpperCase() });\n        }\n    }\n\n    handleBlur(event) {\n        this.isCompositionEnd = true;\n    }\n\n    handleSubmit(event) {\n        // Get From/To date\n        const toDate = new Date();\n        let fromDate = new Date();\n        fromDate.setDate(fromDate.getDate() - 60);\n        const toDateString = new Date(toDate.getTime() - (toDate.getTimezoneOffset() * 60000))\n            .toISOString()\n            .split(\"T\")[0];\n        const fromDateString = new Date(fromDate.getTime() - (fromDate.getTimezoneOffset() * 60000))\n            .toISOString()\n            .split(\"T\")[0];\n\n        let that = this;\n\n        rest.stocks\n            .aggregates(this.state.inputTicker, 1, 'day', fromDateString, toDateString)\n            .then((response) => {\n                // massage response\n                if (response && response.results) {\n                    const massaged = [];\n                    // eslint-disable-next-line\n                    response.results.map(row => {\n                        let rowData = [];\n                        const timeInDate = new Date(row.t);\n                        rowData.push(\n                            new Date(timeInDate.getTime() - (timeInDate.getTimezoneOffset() * 60000))\n                                .toISOString()\n                                .split(\"T\")[0],\n                            row.o,\n                            row.c,\n                            row.l,\n                            row.h,\n                            row.v\n                        );\n                        massaged.push(rowData)\n                    })\n                    that.setState({ massagedData: massaged })\n                    that.setState({ figureTitle: _.cloneDeep(that.state.inputTicker) })\n                }\n            })\n            .catch(/* error handler*/)\n        event.preventDefault();\n    }\n\n    onDataGridSelectTicker(e) {\n        this.setState({ inputTicker: e.data.Ticker });\n        this.handleSubmit(e.event);\n    }\n\n    render() {\n        let subComponent;\n        if (this.state.massagedData.length > 0) {\n            subComponent = <StockFigure title={this.state.figureTitle.toUpperCase()} data={this.state.massagedData} />;\n        } else {\n            subComponent = <div></div>;\n        }\n\n        return (\n            <div className=\"layout-wrapper\">\n                <div className=\"header-section\">\n                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6} md={4} className='title-container'>\n                            <h2 className='title'>Ark Funds Monitor</h2>\n                        </Grid>\n                        <Grid item xs={3} md={4} className='subtitle-container'>\n                            <p className='subtitle-version'>Version: {packageJson.version}</p>\n                            <p className='subtitle-update-date'>Last Update Date: {arkData[0]['Date']}</p>\n                        </Grid>\n                        <Grid item xs={3} md={4} className=\"ticker-input-section\">\n                            <form onSubmit={this.handleSubmit}>\n                                <FormControl>\n                                    <div>\n                                        <Input\n                                            id=\"ticker-textfield\"\n                                            value={this.state.inputTicker}\n                                            onCompositionStart={this.handlingComposition}\n                                            onCompositionUpdate={this.handlingComposition}\n                                            onCompositionEnd={this.handleComposition}\n                                            onChange={this.handleChange}\n                                            onBlur={this.handleBlur}\n                                            placeholder='Ticker'\n                                            endAdornment={\n                                                <InputAdornment position=\"start\">\n                                                    <IconButton\n                                                        aria-label=\"Search\"\n                                                        onClick={this.handleSubmit}\n                                                        edge=\"end\"\n                                                    >\n                                                        <SearchIcon color=\"primary\" />\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            }\n                                        />\n                                    </div>\n                                </FormControl>\n                            </form>\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className=\"data-grid-wrapper\">\n                    <DataGrid onSelectTicker={this.onDataGridSelectTicker} />\n                </div>\n                <div className=\"stock-figure-wrapper\">\n                    {subComponent}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Layout from './layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}