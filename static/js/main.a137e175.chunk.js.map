{"version":3,"sources":["components/data-grid/data-grid.js","components/stock-figure/stock-figure.js","layout.js","serviceWorker.js","index.js"],"names":["rawData","require","Array","prototype","swapElements","a","b","this","splice","DataGrid","props","state","width","window","innerWidth","height","innerHeight","updateWindowDimensions","bind","columnDefs","Object","keys","massageRawData","map","x","genericColDef","key","field","specificColDef","minWidth","push","assign","tempData","_","addEventListener","removeEventListener","setState","e","data","Ticker","onSelectTicker","dataGridDef","defaultColDef","resizable","sortable","filter","getColumnDefs","rowData","Grid","container","spacing","justify","alignItems","item","xs","className","join","paginationAutoPageSize","pagination","onRowClicked","React","Component","arkData","StockFigure","value","categoryData","values","volumes","i","length","dayCount","result","len","sum","j","Math","round","splitData","option","backgroundColor","title","text","left","top","textStyle","color","tooltip","trigger","axisPointer","animation","type","lineStyle","opacity","legend","inactiveColor","link","xAxisIndex","label","toolbox","show","feature","dataZoom","yAxisIndex","brush","brushLink","outOfBrush","colorAlpha","visualMap","seriesIndex","dimension","pieces","grid","right","bottom","xAxis","scale","boundaryGap","axisLine","onZero","splitLine","splitNumber","min","max","gridIndex","axisTick","axisLabel","yAxis","splitArea","start","end","handleIcon","handleSize","dataBackground","areaStyle","handleStyle","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","series","name","itemStyle","color0","borderColor","borderColor0","markPoint","normal","formatter","param","valueDim","symbolOffset","coord","markLine","symbol","symbolSize","emphasis","calculateMA","smooth","filteredArkData","groupMap","date","dataArrayInDate","dataInProps","find","m","Date","buyCount","Direction","sellCount","pointText","getOption","notMerge","lazyUpdate","style","rest","restClient","Layout","inputTicker","massagedData","figureTitle","handleChange","handleSubmit","onDataGridSelectTicker","event","target","console","log","toDate","fromDate","setDate","getDate","toDateString","getTime","getTimezoneOffset","toISOString","split","fromDateString","that","stocks","aggregates","then","response","results","massaged","row","timeInDate","t","o","c","l","h","v","catch","preventDefault","subComponent","toUpperCase","md","onSubmit","FormControl","InputLabel","htmlFor","Input","id","onChange","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","edge","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wunDAQIA,G,qBAAUC,EAAQ,MAEtBC,MAAMC,UAAUC,aAAe,SAAUC,EAAGC,GAExC,OADAC,KAAKF,GAAKE,KAAKC,OAAOF,EAAG,EAAGC,KAAKF,IAAI,GAC9BE,MAGX,IAmHeE,E,kDA7GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAEnB,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBANf,E,0DASLlB,GAAU,IAAD,OACbmB,EAAa,GAwCnB,OAvC2BC,OAAOC,KAAKd,KAAKe,eAAetB,GAAS,IAAII,aAAa,EAAG,GACrEmB,KAAI,SAAAC,GACnB,IAAIC,EAAgB,CAChBC,IAAKF,EACLG,MAAOH,GAEPI,EAAiB,GACrB,OAAQJ,GACJ,IAAK,OACL,IAAK,YACL,IAAK,QACL,IAAK,SACL,IAAK,WACDI,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAC1BiB,SAAU,KAEd,MACJ,IAAK,OACL,IAAK,SACDD,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAC1BiB,SAAU,IAEd,MACJ,IAAK,OACDD,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,GAE9B,MACJ,QACIgB,EAAiB,CACbhB,MAAO,EAAKD,MAAMC,MAAQ,EAC1BiB,SAAU,KAItBV,EAAWW,KAAKV,OAAOW,OAAON,EAAeG,OAE1CT,I,qCAGInB,GACX,IAAIgC,EAAWC,YAAYjC,GAS3B,OAPAgC,EAAST,KAAI,SAAAC,GACT,IAAK,IAAIE,KAAOF,EACA,KAARE,UACOF,EAAEE,MAIdM,I,0CAIPzB,KAAKU,yBACLJ,OAAOqB,iBAAiB,SAAU3B,KAAKU,0B,6CAIvCJ,OAAOsB,oBAAoB,SAAU5B,KAAKU,0B,+CAI1CV,KAAK6B,SAAS,CAAExB,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,gB,mCAGhDqB,GACLA,GAAKA,EAAEC,MAAQD,EAAEC,KAAKC,QACtBhC,KAAKG,MAAM8B,eAAeH,K,+BAK9B,IAAMI,EAAc,CAChBC,cAAe,CAAEC,WAAW,EAAMC,UAAU,EAAMC,QAAQ,GAC1D1B,WAAYZ,KAAKuC,cAAc9C,GAC/B+C,QAASxC,KAAKe,eAAetB,IAEjC,OACI,kBAACgD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACpD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,UAAW,CAAC,kBAAmB,UAAUC,KAAK,MAC7D,kBAAC,cAAD,CACIT,QAASN,EAAYM,QACrB5B,WAAYsB,EAAYtB,WACxBuB,cAAeD,EAAYC,cAC3Be,wBAAwB,EACxBC,YAAY,EACZC,aAAcpD,KAAKoD,aAAazC,KAAKX,c,GArGtCqD,IAAMC,W,2BCfzBC,EAAU7D,EAAQ,KAybP8D,E,kDAjbX,WAAYrD,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEqD,MAAO,IACtB,EAAKtD,MAAQA,EAHE,E,sDAMTV,GAKN,IAJA,IAAIiE,EAAe,GACfC,EAAS,GACTC,EAAU,GAELC,EAAI,EAAGA,EAAIpE,EAAQqE,OAAQD,IAChCH,EAAanC,KAAK9B,EAAQoE,GAAG5D,OAAO,EAAG,GAAG,IAC1C0D,EAAOpC,KAAK9B,EAAQoE,IACpBD,EAAQrC,KAAK,CAACsC,EAAGpE,EAAQoE,GAAG,GAAIpE,EAAQoE,GAAG,GAAKpE,EAAQoE,GAAG,GAAK,GAAK,IAEzE,MAAO,CACHH,aAAcA,EACdC,OAAQA,EACRC,QAASA,K,kCAILG,GAER,IADA,IAAIC,EAAS,GACJH,EAAI,EAAGI,EAAMjE,KAAK+B,KAAK4B,OAAOG,OAAQD,EAAII,EAAKJ,IACpD,GAAIA,EAAIE,EACJC,EAAOzC,KAAK,SADhB,CAKA,IADA,IAAI2C,EAAM,EACDC,EAAI,EAAGA,EAAIJ,EAAUI,IAC1BD,GAAOlE,KAAK+B,KAAK4B,OAAOE,EAAIM,GAAG,GAEnCH,EAAOzC,KAAK6C,KAAKC,MAAMH,EAAMH,EAAW,KAAO,KAEnD,OAAOC,I,kCAIE,IAAD,OACRhE,KAAK+B,KAAO/B,KAAKsE,UAAU5C,YAAY1B,KAAKG,MAAM4B,OAClD,IAAIwC,EAAS,CACTC,gBAAiB,UACjBC,MAAO,CACHC,KAAM1E,KAAKG,MAAMsE,MACjBE,KAAM,KACNC,IAAK,MACLC,UAAW,CAAEC,MAAO,SAExBC,QAAS,CACLC,QAAS,OACTC,YAAa,CACTC,WAAW,EACXC,KAAM,QACNC,UAAW,CACPN,MAAO,UACPzE,MAAO,EACPgF,QAAS,KAIrBC,OAAQ,CACJvD,KAAM,CAAC,MAAO,MAAO,OAAQ,QAC7BwD,cAAe,OACfV,UAAW,CACPC,MAAO,QAEXF,IAAK,MAETK,YAAa,CACTO,KAAM,CAAEC,WAAY,OACpBC,MAAO,CACHlB,gBAAiB,SAGzBmB,QAAS,CACLC,MAAM,EACNC,QAAS,CACLC,SAAU,CACNC,YAAY,GAEhBC,MAAO,CACHb,KAAM,CAAC,QAAS,YAI5Ba,MAAO,CACHP,WAAY,MACZQ,UAAW,MACXC,WAAY,CACRC,WAAY,KAGpBC,UAAW,CACPR,MAAM,EACNS,YAAa,EACbC,UAAW,EACXC,OAAQ,CAAC,CACL9C,MAAO,EACPqB,MA1GJ,WA2GG,CACCrB,OAAQ,EACRqB,MA3GN,aA8GF0B,KAAM,CACF,CACI7B,KAAM,KACN8B,MAAO,KACPC,OAAQ,OAEZ,CACI/B,KAAM,KACN8B,MAAO,KACPjG,OAAQ,MACRkG,OAAQ,QAGhBC,MAAO,CACH,CACIxB,KAAM,WACNpD,KAAM/B,KAAK+B,KAAK2B,aAChBkD,OAAO,EACPC,aAAa,EACbC,SAAU,CAAEC,QAAQ,EAAO3B,UAAW,CAAEN,MAAO,YAC/CkC,UAAW,CAAEpB,MAAM,GACnBqB,YAAa,GACbC,IAAK,UACLC,IAAK,WAET,CACIhC,KAAM,WACNiC,UAAW,EACXrF,KAAM/B,KAAK+B,KAAK2B,aAChBkD,OAAO,EACPC,aAAa,EACbC,SAAU,CAAEC,QAAQ,EAAO3B,UAAW,CAAEN,MAAO,YAC/CuC,SAAU,CAAEzB,MAAM,GAClBoB,UAAW,CAAEpB,MAAM,GACnB0B,UAAW,CAAE1B,MAAM,GACnBqB,YAAa,GACbC,IAAK,UACLC,IAAK,YAGbI,MAAO,CAAC,CACJX,OAAO,EACPY,UAAW,CACP5B,MAAM,GAEVkB,SAAU,CAAE1B,UAAW,CAAEN,MAAO,YAChCkC,UAAW,CAAEpB,MAAM,IAEvB,CACIgB,OAAO,EACPQ,UAAW,EACXH,YAAa,EACbK,UAAW,CAAE1B,MAAM,GACnBkB,SAAU,CAAElB,MAAM,EAAOR,UAAW,CAAEN,MAAO,YAC7CuC,SAAU,CAAEzB,MAAM,GAClBoB,UAAW,CAAEpB,MAAM,KAGvBE,SAAU,CACN,CACIX,KAAM,SACNsC,MAAO,EACPC,IAAK,KAET,CACI9B,MAAM,EACNT,KAAM,SACNuB,OAAQ,KACRe,MAAO,EACPC,IAAK,IACL7C,UAAW,CACPC,MAAO,WAEX6C,WAAY,qMACZC,WAAY,MACZC,eAAgB,CACZC,UAAW,CACPhD,MAAO,WAEXM,UAAW,CACPC,QAAS,GACTP,MAAO,YAGfiD,YAAa,CACTjD,MAAO,OACPkD,WAAY,EACZC,YAAa,qBACbC,cAAe,EACfC,cAAe,KAI3BC,OAAQ,CACJ,CACIC,KAAM,MACNlD,KAAM,cACNpD,KAAM/B,KAAK+B,KAAK4B,OAChB2E,UAAW,CACPxD,MAjNV,UAkNUyD,OApNR,UAqNQC,YAlNJ,UAmNIC,aArNF,WAuNFC,UACA,CACIhD,MAAO,CACHiD,OAAQ,CACJC,UAAW,SAAUC,GACjB,GAAuB,kBAAXA,EACR,OAAgB,MAATA,EAAgBzE,KAAKC,MAAMwE,EAAMpF,OAAS,MAKjE1B,KAAM,CACF,CACIsG,KAAM,gBACNlD,KAAM,MACN2D,SAAU,UACVC,aAAc,CAAC,GAAI,KAEvB,CACIV,KAAM,eACNlD,KAAM,MACN2D,SAAU,SACVC,aAAc,CAAC,GAAI,KAEvB,CACIV,KAAM,yBACNlD,KAAM,UACN2D,SAAU,QACVC,aAAc,CAAC,GAAI,MAG3BhE,QAAS,CACL6D,UAAY,SAACC,GAAD,OAAWA,EAAMR,KAAO,QAAUQ,EAAM9G,KAAKiH,OAAS,OAG1EC,SAAU,CACNC,OAAQ,CAAC,OAAQ,QACjB9D,UAAW,CACPN,MA9PZ,WAgQQ/C,KAAM,CACF,CACI,CACIsG,KAAM,yBACNlD,KAAM,MACN2D,SAAU,SACVI,OAAQ,SACRC,WAAY,GACZzD,MAAO,CACHE,MAAM,GAEVwD,SAAU,CACN1D,MAAO,CACHE,MAAM,KAIlB,CACIT,KAAM,MACN2D,SAAU,UACVI,OAAQ,SACRC,WAAY,GACZzD,MAAO,CACHE,MAAM,GAEVwD,SAAU,CACN1D,MAAO,CACHE,MAAM,MAKtB,CACIyC,KAAM,oBACNlD,KAAM,MACN2D,SAAU,SAEd,CACIT,KAAM,oBACNlD,KAAM,MACN2D,SAAU,YAK1B,CACIT,KAAM,MACNlD,KAAM,OACNpD,KAAM/B,KAAKqJ,YAAY,GACvBC,QAAQ,EACRlE,UAAW,CACPC,QAAS,IAEbiD,UAAW,CACPxD,MAAO,YAGf,CACIuD,KAAM,OACNlD,KAAM,OACNpD,KAAM/B,KAAKqJ,YAAY,IACvBC,QAAQ,EACRlE,UAAW,CACPC,QAAS,IAEbiD,UAAW,CACPxD,MAAO,YAGf,CACIuD,KAAM,OACNlD,KAAM,OACNpD,KAAM/B,KAAKqJ,YAAY,IACvBC,QAAQ,EACRlE,UAAW,CACPC,QAAS,IAEbiD,UAAW,CACPxD,MAAO,YAYf,CACIuD,KAAM,SACNlD,KAAM,MACNM,WAAY,EACZM,WAAY,EACZhE,KAAM/B,KAAK+B,KAAK6B,WAOtB2F,EAAkBhG,EAAQjB,QAAO,SAAArB,GAAC,OAAIA,EAAEe,SAAW,EAAK7B,MAAMsE,SACpE,IAAK8E,GAA8C,IAA3BA,EAAgBzF,OACpC,OAAOS,EAGX,IAAMiF,EAAW9H,UAAU6H,EAAiB,QA7TpC,WA8TCE,GACL,IAAMC,EAAkBF,EAASC,GAC3BE,EAAc,EAAKxJ,MAAM4B,KAAK6H,MAAK,SAAAC,GAAC,OAAIA,EAAE,KAAOH,EAAgB,GAAGI,QAC1E,IAAMH,IAAeA,EAAY,GAC7B,iBAGJ,IAAMI,EAAWL,EAAgB1I,KAAI,SAAAC,GAAC,MAAoB,QAAhBA,EAAE+I,aAAqBlG,OAC3DmG,EAAYP,EAAgB5F,OAASiG,EAC3C,GAAiB,IAAbA,GAAgC,IAAdE,EAAiB,CACnC,IAAIC,EAAY,GACC,IAAbH,EACAG,EAA0B,IAAdD,EAAA,UACKP,EAAgB,GAAGM,WADxB,iBAEYC,GACH,IAAdA,IACPC,EAAyB,IAAbH,EAAA,UACKL,EAAgB,GAAGM,WADxB,gBAEWD,IAG3BxF,EAAO6D,OAAO,GAAGM,UAAU3G,KAAKR,KAAK,CACjC8G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,YAAgCJ,EAAgB,GAAGM,WACvDhB,MAAO,CAACU,EAAgB,GAAGI,KAAMH,EAAY,IAC7ClG,MAAOyG,EACP5B,UAAW,CACPxD,MAAoB,IAAbiF,EACD,gBACA,4BAKdxF,EAAO6D,OAAO,GAAGM,UAAU3G,KAAKR,KAAK,CACjC8G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,QACJd,MAAO,CAACU,EAAgB,GAAGI,KAAMH,EAAY,IAC7ClG,MAAM,SAAD,OAAWsG,GAChBzB,UAAW,CACPxD,MAAO,uBAIfP,EAAO6D,OAAO,GAAGM,UAAU3G,KAAKR,KAAK,CACjC8G,KAAK,GAAD,OAAKqB,EAAgB,GAAGI,KAAxB,SACJd,MAAO,CAACU,EAAgB,GAAGI,KAAuB,IAAjBH,EAAY,IAC7ClG,MAAM,SAAD,OAAWwG,GAChB3B,UAAW,CACPxD,MAAO,oBA/CvB,IAAK,IAAI2E,KAAQD,EAAU,EAAlBC,GAoDT,OAAOlF,I,+BAIP,OACI,kBAAC,IAAD,CACIA,OAAQvE,KAAKmK,YACbC,UAAU,EACVC,YAAY,EACZC,MAAO,CAAE9J,OAAQ,QAASH,MAAO,c,GApavBgD,IAAMC,WCC1BiH,EAAOC,qBAAW,oCAqHTC,E,kDAlHX,WAAYtK,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEsK,YAAa,GAAIC,aAAc,GAAIC,YAAa,IAC/D,EAAKC,aAAe,EAAKA,aAAalK,KAAlB,gBACpB,EAAKmK,aAAe,EAAKA,aAAanK,KAAlB,gBACpB,EAAKoK,uBAAyB,EAAKA,uBAAuBpK,KAA5B,gBALf,E,yDAQNqK,GACThL,KAAK6B,SAAS,CAAE6I,YAAaM,EAAMC,OAAOxH,U,mCAGjCuH,GACTE,QAAQC,IAAIH,GAEZ,IAAMI,EAAS,IAAItB,KACfuB,EAAW,IAAIvB,KACnBuB,EAASC,QAAQD,EAASE,UAAY,IACtC,IAAMC,EAAe,IAAI1B,KAAKsB,EAAOK,UAA0C,IAA7BL,EAAOM,qBACpDC,cACAC,MAAM,KAAK,GACVC,EAAiB,IAAI/B,KAAKuB,EAASI,UAA4C,IAA/BJ,EAASK,qBAC1DC,cACAC,MAAM,KAAK,GAEZE,EAAO9L,KAEXuK,EAAKwB,OACAC,WAAWhM,KAAKI,MAAMsK,YAAa,EAAG,MAAOmB,EAAgBL,GAC7DS,MAAK,SAACC,GAEH,GAAIA,GAAYA,EAASC,QAAS,CAC9B,IAAMC,EAAW,GACjBF,EAASC,QAAQnL,KAAI,SAAAqL,GACjB,IAAI7J,EAAU,GACR8J,EAAa,IAAIxC,KAAKuC,EAAIE,GAChC/J,EAAQjB,KACJ,IAAIuI,KAAKwC,EAAWb,UAA8C,IAAjCa,EAAWZ,qBACvCC,cACAC,MAAM,KAAK,GAChBS,EAAIG,EACJH,EAAII,EACJJ,EAAIK,EACJL,EAAIM,EACJN,EAAIO,GAERR,EAAS7K,KAAKiB,MAElBsJ,EAAKjK,SAAS,CAAE8I,aAAcyB,IAC9BN,EAAKjK,SAAS,CAAE+I,YAAalJ,YAAYoK,EAAK1L,MAAMsK,mBAG3DmC,QACL7B,EAAM8B,mB,6CAGahL,GACnB9B,KAAK6B,SAAS,CAAE6I,YAAa5I,EAAEC,KAAKC,SACpChC,KAAK8K,aAAahJ,EAAEkJ,S,+BAIpB,IAAI+B,EAOJ,OALIA,EADA/M,KAAKI,MAAMuK,aAAa7G,OAAS,EAClB,kBAAC,EAAD,CAAaW,MAAOzE,KAAKI,MAAMwK,YAAYoC,cAAejL,KAAM/B,KAAKI,MAAMuK,eAE3E,8BAIf,yBAAK3H,UAAU,kBACX,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,SAASG,UAAU,UACvE,kBAACP,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGkK,GAAI,IAEtB,kBAACxK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGkK,GAAI,EAAGjK,UAAU,SAC/B,iEAEJ,kBAACP,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGkK,GAAI,EAAGjK,UAAU,wBAC/B,0BAAMkK,SAAUlN,KAAK8K,cACjB,kBAACqC,EAAA,EAAD,KACI,6BACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,UACA,kBAACC,EAAA,EAAD,CACIC,GAAG,mBACH9J,MAAOzD,KAAKI,MAAMsK,YAClB8C,SAAUxN,KAAK6K,aACf4C,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACrB,kBAACC,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS9N,KAAK8K,aACdiD,KAAK,OAEL,kBAAC,IAAD,CAAYjJ,MAAM,qBAUtD,yBAAK9B,UAAU,qBACX,kBAAC,EAAD,CAAUf,eAAgBjC,KAAK+K,0BAEnC,yBAAK/H,UAAU,wBACV+J,Q,GA5GA1J,IAAMC,WCHP0K,QACW,cAA7B1N,OAAO2N,SAASC,UAEe,UAA7B5N,OAAO2N,SAASC,UAEhB5N,OAAO2N,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.a137e175.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport * as _ from 'lodash';\r\nimport { Grid } from '@material-ui/core';\r\nimport './data-grid.scss';\r\n\r\nlet rawData = require('../../rawData/mergedData.json');\r\n\r\nArray.prototype.swapElements = function (a, b) {\r\n    this[a] = this.splice(b, 1, this[a])[0];\r\n    return this;\r\n}\r\n\r\nconst toDate = (dateStr) => {\r\n    const [year, month, day] = dateStr.split(\"-\")\r\n    return new Date(year, month, day)\r\n}\r\n\r\nclass DataGrid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    getColumnDefs(rawData) {\r\n        const columnDefs = [];\r\n        const columnNamesInOrder = Object.keys(this.massageRawData(rawData)[0]).swapElements(0, 1);\r\n        columnNamesInOrder.map(x => {\r\n            let genericColDef = {\r\n                key: x,\r\n                field: x,\r\n            };\r\n            let specificColDef = {};\r\n            switch (x) {\r\n                case 'Date':\r\n                case 'Direction':\r\n                case 'CUSIP':\r\n                case 'Shares':\r\n                case '% Of ETF':\r\n                    specificColDef = {\r\n                        width: this.state.width / 12,\r\n                        minWidth: 100,\r\n                    }\r\n                    break\r\n                case 'FUND':\r\n                case 'Ticker':\r\n                    specificColDef = {\r\n                        width: this.state.width / 10,\r\n                        minWidth: 90,\r\n                    }\r\n                    break\r\n                case 'Name':\r\n                    specificColDef = {\r\n                        width: this.state.width / 4,\r\n                    }\r\n                    break\r\n                default:\r\n                    specificColDef = {\r\n                        width: this.state.width / 8,\r\n                        minWidth: 100,\r\n                    };\r\n                    break;\r\n            }\r\n            columnDefs.push(Object.assign(genericColDef, specificColDef));\r\n        })\r\n        return columnDefs;\r\n    }\r\n\r\n    massageRawData(rawData) {\r\n        let tempData = _.cloneDeep(rawData);\r\n        // remove empty property\r\n        tempData.map(x => {\r\n            for (let key in x) {\r\n                if (key === '') {\r\n                    delete x[key];\r\n                }\r\n            }\r\n        })\r\n        return tempData;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    onRowClicked(e) {\r\n        if (e && e.data && e.data.Ticker) {\r\n            this.props.onSelectTicker(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dataGridDef = {\r\n            defaultColDef: { resizable: true, sortable: true, filter: true },\r\n            columnDefs: this.getColumnDefs(rawData),\r\n            rowData: this.massageRawData(rawData)\r\n        }\r\n        return (\r\n            <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                <Grid item xs={11} className={['ag-theme-alpine', 'center'].join(' ')}>\r\n                    <AgGridReact\r\n                        rowData={dataGridDef.rowData}\r\n                        columnDefs={dataGridDef.columnDefs}\r\n                        defaultColDef={dataGridDef.defaultColDef}\r\n                        paginationAutoPageSize={true}\r\n                        pagination={true}\r\n                        onRowClicked={this.onRowClicked.bind(this)}\r\n                    >\r\n                    </AgGridReact>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n};\r\n\r\nexport default DataGrid;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport './stock-figure.scss';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nlet arkData = require('../../rawData/mergedData.json');\r\n\r\nvar downColor = '#ec0000';\r\nvar downBorderColor = '#8A0000';\r\nvar upColor = '#00da3c';\r\nvar upBorderColor = '#008F28';\r\n\r\nclass StockFigure extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n        this.props = props;\r\n    }\r\n\r\n    splitData(rawData) {\r\n        var categoryData = [];\r\n        var values = [];\r\n        var volumes = [];\r\n\r\n        for (var i = 0; i < rawData.length; i++) {\r\n            categoryData.push(rawData[i].splice(0, 1)[0]);\r\n            values.push(rawData[i]);\r\n            volumes.push([i, rawData[i][4], rawData[i][0] > rawData[i][1] ? 1 : -1]);;\r\n        }\r\n        return {\r\n            categoryData: categoryData,\r\n            values: values,\r\n            volumes: volumes\r\n        };\r\n    }\r\n\r\n    calculateMA(dayCount) {\r\n        var result = [];\r\n        for (var i = 0, len = this.data.values.length; i < len; i++) {\r\n            if (i < dayCount) {\r\n                result.push('-');\r\n                continue;\r\n            }\r\n            var sum = 0;\r\n            for (var j = 0; j < dayCount; j++) {\r\n                sum += this.data.values[i - j][1];\r\n            }\r\n            result.push(Math.round(sum / dayCount * 100) / 100);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    getOption() {\r\n        this.data = this.splitData(_.cloneDeep(this.props.data));\r\n        let option = {\r\n            backgroundColor: '#21202D',\r\n            title: {\r\n                text: this.props.title,\r\n                left: '5%',\r\n                top: '-1%',\r\n                textStyle: { color: '#fff' },\r\n            },\r\n            tooltip: {\r\n                trigger: 'axis',\r\n                axisPointer: {\r\n                    animation: false,\r\n                    type: 'cross',\r\n                    lineStyle: {\r\n                        color: '#376df4',\r\n                        width: 2,\r\n                        opacity: 1\r\n                    }\r\n                }\r\n            },\r\n            legend: {\r\n                data: ['Day', 'MA5', 'MA10', 'MA20'],\r\n                inactiveColor: '#777',\r\n                textStyle: {\r\n                    color: '#fff'\r\n                },\r\n                top: '1%',\r\n            },\r\n            axisPointer: {\r\n                link: { xAxisIndex: 'all' },\r\n                label: {\r\n                    backgroundColor: '#777'\r\n                }\r\n            },\r\n            toolbox: {\r\n                show: false,\r\n                feature: {\r\n                    dataZoom: {\r\n                        yAxisIndex: false\r\n                    },\r\n                    brush: {\r\n                        type: ['lineX', 'clear']\r\n                    }\r\n                }\r\n            },\r\n            brush: {\r\n                xAxisIndex: 'all',\r\n                brushLink: 'all',\r\n                outOfBrush: {\r\n                    colorAlpha: 0.1\r\n                }\r\n            },\r\n            visualMap: {\r\n                show: false,\r\n                seriesIndex: 4,\r\n                dimension: 2,\r\n                pieces: [{\r\n                    value: 1,\r\n                    color: downColor\r\n                }, {\r\n                    value: -1,\r\n                    color: upColor\r\n                }]\r\n            },\r\n            grid: [\r\n                {\r\n                    left: '5%',\r\n                    right: '5%',\r\n                    bottom: '30%'\r\n                },\r\n                {\r\n                    left: '5%',\r\n                    right: '5%',\r\n                    height: '15%',\r\n                    bottom: '10%'\r\n                }\r\n            ],\r\n            xAxis: [\r\n                {\r\n                    type: 'category',\r\n                    data: this.data.categoryData,\r\n                    scale: true,\r\n                    boundaryGap: false,\r\n                    axisLine: { onZero: false, lineStyle: { color: '#8392A5' } },\r\n                    splitLine: { show: false },\r\n                    splitNumber: 20,\r\n                    min: 'dataMin',\r\n                    max: 'dataMax'\r\n                },\r\n                {\r\n                    type: 'category',\r\n                    gridIndex: 1,\r\n                    data: this.data.categoryData,\r\n                    scale: true,\r\n                    boundaryGap: false,\r\n                    axisLine: { onZero: false, lineStyle: { color: '#8392A5' } },\r\n                    axisTick: { show: false },\r\n                    splitLine: { show: false },\r\n                    axisLabel: { show: false },\r\n                    splitNumber: 20,\r\n                    min: 'dataMin',\r\n                    max: 'dataMax'\r\n                }\r\n            ],\r\n            yAxis: [{\r\n                scale: true,\r\n                splitArea: {\r\n                    show: true\r\n                },\r\n                axisLine: { lineStyle: { color: '#8392A5' } },\r\n                splitLine: { show: false }\r\n            },\r\n            {\r\n                scale: true,\r\n                gridIndex: 1,\r\n                splitNumber: 2,\r\n                axisLabel: { show: false },\r\n                axisLine: { show: false, lineStyle: { color: '#8392A5' } },\r\n                axisTick: { show: false },\r\n                splitLine: { show: false }\r\n            }\r\n            ],\r\n            dataZoom: [\r\n                {\r\n                    type: 'inside',\r\n                    start: 0,\r\n                    end: 100\r\n                },\r\n                {\r\n                    show: true,\r\n                    type: 'slider',\r\n                    bottom: '2%',\r\n                    start: 0,\r\n                    end: 100,\r\n                    textStyle: {\r\n                        color: '#8392A5'\r\n                    },\r\n                    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\r\n                    handleSize: '80%',\r\n                    dataBackground: {\r\n                        areaStyle: {\r\n                            color: '#8392A5'\r\n                        },\r\n                        lineStyle: {\r\n                            opacity: 0.8,\r\n                            color: '#8392A5'\r\n                        }\r\n                    },\r\n                    handleStyle: {\r\n                        color: '#fff',\r\n                        shadowBlur: 3,\r\n                        shadowColor: 'rgba(0, 0, 0, 0.6)',\r\n                        shadowOffsetX: 2,\r\n                        shadowOffsetY: 2\r\n                    }\r\n                }\r\n            ],\r\n            series: [\r\n                {\r\n                    name: 'Day',\r\n                    type: 'candlestick',\r\n                    data: this.data.values,\r\n                    itemStyle: {\r\n                        color: upColor,\r\n                        color0: downColor,\r\n                        borderColor: upBorderColor,\r\n                        borderColor0: downBorderColor\r\n                    },\r\n                    markPoint:\r\n                    {\r\n                        label: {\r\n                            normal: {\r\n                                formatter: function (param) {\r\n                                    if (typeof (param) === 'number') {\r\n                                        return param != null ? Math.round(param.value) : '';\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        data: [\r\n                            {\r\n                                name: 'highest value',\r\n                                type: 'max',\r\n                                valueDim: 'highest',\r\n                                symbolOffset: [0, -20]\r\n                            },\r\n                            {\r\n                                name: 'lowest value',\r\n                                type: 'min',\r\n                                valueDim: 'lowest',\r\n                                symbolOffset: [0, -20]\r\n                            },\r\n                            {\r\n                                name: 'average value on close',\r\n                                type: 'average',\r\n                                valueDim: 'close',\r\n                                symbolOffset: [0, -20]\r\n                            }\r\n                        ],\r\n                        tooltip: {\r\n                            formatter: ((param) => param.name + '<br>' + (param.data.coord || ''))\r\n                        }\r\n                    },\r\n                    markLine: {\r\n                        symbol: ['none', 'none'],\r\n                        lineStyle: {\r\n                            color: downColor\r\n                        },\r\n                        data: [\r\n                            [\r\n                                {\r\n                                    name: 'from lowest to highest',\r\n                                    type: 'min',\r\n                                    valueDim: 'lowest',\r\n                                    symbol: 'circle',\r\n                                    symbolSize: 10,\r\n                                    label: {\r\n                                        show: false\r\n                                    },\r\n                                    emphasis: {\r\n                                        label: {\r\n                                            show: false\r\n                                        }\r\n                                    }\r\n                                },\r\n                                {\r\n                                    type: 'max',\r\n                                    valueDim: 'highest',\r\n                                    symbol: 'circle',\r\n                                    symbolSize: 10,\r\n                                    label: {\r\n                                        show: false\r\n                                    },\r\n                                    emphasis: {\r\n                                        label: {\r\n                                            show: false\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ],\r\n                            {\r\n                                name: 'min line on close',\r\n                                type: 'min',\r\n                                valueDim: 'close'\r\n                            },\r\n                            {\r\n                                name: 'max line on close',\r\n                                type: 'max',\r\n                                valueDim: 'close'\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    name: 'MA5',\r\n                    type: 'line',\r\n                    data: this.calculateMA(5),\r\n                    smooth: true,\r\n                    lineStyle: {\r\n                        opacity: 0.5\r\n                    },\r\n                    itemStyle: {\r\n                        color: '#0000FF'\r\n                    }\r\n                },\r\n                {\r\n                    name: 'MA10',\r\n                    type: 'line',\r\n                    data: this.calculateMA(10),\r\n                    smooth: true,\r\n                    lineStyle: {\r\n                        opacity: 0.5\r\n                    },\r\n                    itemStyle: {\r\n                        color: '#FFAE19',\r\n                    }\r\n                },\r\n                {\r\n                    name: 'MA20',\r\n                    type: 'line',\r\n                    data: this.calculateMA(20),\r\n                    smooth: true,\r\n                    lineStyle: {\r\n                        opacity: 0.5\r\n                    },\r\n                    itemStyle: {\r\n                        color: '#FF00FF',\r\n                    }\r\n                },\r\n                // {\r\n                //     name: 'MA30',\r\n                //     type: 'line',\r\n                //     data: this.calculateMA(30),\r\n                //     smooth: true,\r\n                //     lineStyle: {\r\n                //         opacity: 0.5\r\n                //     }\r\n                // },\r\n                {\r\n                    name: 'Volume',\r\n                    type: 'bar',\r\n                    xAxisIndex: 1,\r\n                    yAxisIndex: 1,\r\n                    data: this.data.volumes\r\n                }\r\n\r\n            ]\r\n        };\r\n\r\n        // handle mark point for BUY/SELL from ARK\r\n        const filteredArkData = arkData.filter(x => x.Ticker === this.props.title);\r\n        if (!filteredArkData || filteredArkData.length === 0) {\r\n            return option;\r\n        }\r\n\r\n        const groupMap = _.groupBy(filteredArkData, 'Date');\r\n        for (let date in groupMap) {\r\n            const dataArrayInDate = groupMap[date];\r\n            const dataInProps = this.props.data.find(m => m[0] === dataArrayInDate[0].Date);\r\n            if (!(dataInProps && dataInProps[4])) {\r\n                continue;\r\n            }\r\n\r\n            const buyCount = dataArrayInDate.map(x => x.Direction === 'Buy').length;\r\n            const sellCount = dataArrayInDate.length - buyCount;\r\n            if (buyCount === 0 || sellCount === 0) {\r\n                let pointText = '';\r\n                if (buyCount === 0) {\r\n                    pointText = sellCount === 1\r\n                                ? `${dataArrayInDate[0].Direction}`\r\n                                : `Sell\\nX${sellCount}`;\r\n                } else if (sellCount === 0) {\r\n                    pointText = buyCount === 1\r\n                                ? `${dataArrayInDate[0].Direction}`\r\n                                : `Buy\\nX${buyCount}`;\r\n                }\r\n\r\n                option.series[0].markPoint.data.push({\r\n                    name: `${dataArrayInDate[0].Date} ${dataArrayInDate[0].Direction}`,\r\n                    coord: [dataArrayInDate[0].Date, dataInProps[4]],\r\n                    value: pointText,\r\n                    itemStyle: {\r\n                        color: buyCount === 0\r\n                            ? 'rgb(41,60,85)'\r\n                            : 'rgb(186, 171, 52)'\r\n                    }\r\n                })\r\n            } else {\r\n                // have buyCount > 0 and sellCount > 0\r\n                option.series[0].markPoint.data.push({\r\n                    name: `${dataArrayInDate[0].Date} Buy`,\r\n                    coord: [dataArrayInDate[0].Date, dataInProps[4]],\r\n                    value: `Buy\\nX${buyCount}`,\r\n                    itemStyle: {\r\n                        color: 'rgb(186, 171, 52)'\r\n                    }\r\n                })\r\n\r\n                option.series[0].markPoint.data.push({\r\n                    name: `${dataArrayInDate[0].Date} Sell`,\r\n                    coord: [dataArrayInDate[0].Date, dataInProps[4] * 1.1],\r\n                    value: `Sell\\n${sellCount}`,\r\n                    itemStyle: {\r\n                        color: 'rgb(41,60,85)'\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactEcharts\r\n                option={this.getOption()}\r\n                notMerge={true}\r\n                lazyUpdate={true}\r\n                style={{ height: '500px', width: '100%' }}\r\n            />\r\n            // /* <ReactEcharts\r\n            //     option={this.getOption()}\r\n            //     notMerge={true}\r\n            //     lazyUpdate={true}\r\n            //     theme={\"theme_name\"}\r\n            //     onChartReady={this.onChartReadyCallback}\r\n            //     onEvents={EventsDict}\r\n            //     opts={} /> */\r\n        );\r\n    }\r\n}\r\n\r\nexport default StockFigure;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { restClient } from \"polygon.io\";\r\nimport {\r\n    Grid, Input, FormControl,\r\n    InputLabel, IconButton, InputAdornment\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport './layout.scss';\r\nimport DataGrid from './components/data-grid/data-grid';\r\nimport StockFigure from './components/stock-figure/stock-figure';\r\n\r\nconst rest = restClient(\"RTHdj0YLW1JrkVcVeSQjBSHFgS4lgtCf\");\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { inputTicker: '', massagedData: [], figureTitle: '' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.onDataGridSelectTicker = this.onDataGridSelectTicker.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ inputTicker: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log(event)\r\n        // Get From/To date\r\n        const toDate = new Date();\r\n        let fromDate = new Date();\r\n        fromDate.setDate(fromDate.getDate() - 60);\r\n        const toDateString = new Date(toDate.getTime() - (toDate.getTimezoneOffset() * 60000))\r\n            .toISOString()\r\n            .split(\"T\")[0];\r\n        const fromDateString = new Date(fromDate.getTime() - (fromDate.getTimezoneOffset() * 60000))\r\n            .toISOString()\r\n            .split(\"T\")[0];\r\n\r\n        let that = this;\r\n\r\n        rest.stocks\r\n            .aggregates(this.state.inputTicker, 1, 'day', fromDateString, toDateString)\r\n            .then((response) => {\r\n                // massage response\r\n                if (response && response.results) {\r\n                    const massaged = [];\r\n                    response.results.map(row => {\r\n                        let rowData = [];\r\n                        const timeInDate = new Date(row.t);\r\n                        rowData.push(\r\n                            new Date(timeInDate.getTime() - (timeInDate.getTimezoneOffset() * 60000))\r\n                                .toISOString()\r\n                                .split(\"T\")[0],\r\n                            row.o,\r\n                            row.c,\r\n                            row.l,\r\n                            row.h,\r\n                            row.v\r\n                        );\r\n                        massaged.push(rowData)\r\n                    })\r\n                    that.setState({ massagedData: massaged })\r\n                    that.setState({ figureTitle: _.cloneDeep(that.state.inputTicker) })\r\n                }\r\n            })\r\n            .catch(/* your error handler*/)\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDataGridSelectTicker(e) {\r\n        this.setState({ inputTicker: e.data.Ticker });\r\n        this.handleSubmit(e.event);\r\n    }\r\n\r\n    render() {\r\n        let subComponent;\r\n        if (this.state.massagedData.length > 0) {\r\n            subComponent = <StockFigure title={this.state.figureTitle.toUpperCase()} data={this.state.massagedData} />;\r\n        } else {\r\n            subComponent = <div></div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"layout-wrapper\">\r\n                <Grid container spacing={3} justify=\"center\" alignItems=\"center\" className=\"header\">\r\n                    <Grid item xs={3} md={4}>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={4} className='title'>\r\n                        <span>Ark Funds Transactions History</span>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={4} className=\"ticker-input-section\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <FormControl>\r\n                                <div>\r\n                                    <InputLabel htmlFor=\"ticker-textfield\">Ticker</InputLabel>\r\n                                    <Input\r\n                                        id=\"ticker-textfield\"\r\n                                        value={this.state.inputTicker}\r\n                                        onChange={this.handleChange}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <IconButton\r\n                                                    aria-label=\"Search\"\r\n                                                    onClick={this.handleSubmit}\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    <SearchIcon color=\"primary\"/>\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </FormControl>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n                <div className=\"data-grid-wrapper\">\r\n                    <DataGrid onSelectTicker={this.onDataGridSelectTicker}/>\r\n                </div>\r\n                <div className=\"stock-figure-wrapper\">\r\n                    {subComponent}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Layout from './layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}